#### avant de commencer : une idée sur l'internationalisation
#aller dans le fichier : en.yml et mettez un un mot hello :'bienvenue'
#la ou tu veut l'afficher met <%=t('hello')%>
#pour les messages automatique de rails vers un certain langage fr par exemple, il faut :
##### creer une fichier fr.yml dans le dossier config/locales et 
##### dans application.rb (tjrs dans config/) decommenter  une ligne .... :de et changer vers :fr
####" n'oublier pas de redemarre le serveur "
#modification du fichier index.html.erb ###########
=begin
<h1>Listes des sujets </h1>
<% @sujets.each do |s|%>
<p><%= link_to s.titre , s %></p>
<blockquote><%= truncate s.contenu %>(<%=link_to 'Modifier' , edit_sujet_path(s) %> |
 <%=link_to 'Supprimer', s,:method => :delete , :data => {:confirm =>  'vous etes sur de vouloir supprimer cet élément ?'} %> )</blockquote>
<% end %>
<h3><%=link_to 'Nouveau sujet :', new_sujet_path %></h3>
<h3><%=link_to 'Listes des sujets ', sujets_path %></h3>
=end	
##### ajout des criteres de validation (javascript dans le formulaire) DANS LE MODELE DE SUJET
=begin

	validates :titre , 
		:presence => true  , 
		:length   => { :maximum => 50 , :minimum => 2 }
	validates :contenu , 
			   :presence => true , 
			   :length => {:maximum => 200 , :minimum => 6}
=end 

###### ajout du render _form.html.erb dans views/sujets
##avec les messages d'erreurs 
=begin 
<%= form_for(@sujet) do |f| %>
<div>
  <% if @sujet.errors.any? %>
  <%= pluralize(@sujet.errors.count,t('error')) %> 
  <ul>
  <% @sujet.errors.full_messages.each do |m| %>
<li><%= m %></li>
  </ul>
  <% end %>
  <% end %>

</div>
<div>
  <%=f.label :titre %>
  <%=f.text_field :titre %>
</div>
<div>
<%= f.label :contenu %>
<%= f.text_area :contenu %>
</div>
<div>
  <%= f.submit  'Valider'%>
</div>
<% end %>


=end 
#### ajout des comements : rails g modele Comment sujet_id:integer , commentaire:text
rake db:migrate 
dans les modeles ajout de has_many commets (avec s)
belongs_to sujet (sans s )
n'oublier pas de modifier le routes.rb , pour associer les commentaires au posts en routage 
  resources :sujets do
    resources :comments
  end
  par exemple: 
=begin
   sujet_comments_path 	GET 	/sujets/:sujet_id/comments(.:format) 	comments#index
	POST 	/sujets/:sujet_id/comments(.:format) 	comments#create
new_sujet_comment_path 	GET 	/sujets/:sujet_id/comments/new(.:format) 	comments#new
edit_sujet_comment_path
=end
###le code pour lister les commentaires d'un sujet dans la page show.html.erb du sujet @sujet:
<h3>Les commentaires: </h3>	
<% @sujet.comments.each do |m|  %>
<p><%= m %></p>
<% end %>

### ajout du formulaire d'ajout du commentaire :
<h3>Ajouter les commentaires : </h3>

<%= form_for([@sujet, @sujet.comments.build]) do |f| %>
<p><%= f.label :commentaire %>: <%= f.text_area :commentaire , cols: 40, rows: 10, :placeholder =>'Entrer un commentaire...' %></p>
<p><%= f.submit 'Ajouter le commentaire '%></p>
<% end %>
####### mais ce dernier necessite la creation du controller des comments : 
rails g controller comments (avec s ) create destroy 
## n'oublie pas  (dans comment.rb)
def sujet_params
      params.require(:sujet).permit(:titre, :contenu)
    end


    qui sera utiliser  dans :

    def create
	#recuperer le sujet du commentaire 
	 @sujet=Sujet.find(params[:sujet_id])
	
	@comment=@sujet.comments.build(comment_params) #build equivalent de .new  ensuite on doit faire .save ou faire .create au lieu de build suivi par save
  
    @comment.save
   
	redirect_to @sujet


end 
###########remarque importante ######### pour recuperer le 'comment' à supprimer ainsi que son sujet_id , (n'oublie pas de mettre resource :comment pour router les comment_path.... dans link_to delete par exemple )
	@comment=Comment.find(params[:id])
	 @sujet=@comment.sujet
end
#### si le commentaire est non valide :
dans le comment_controller#create 
il faut mettre :
=begin 
def create
	
		#recuperer le sujet du commentaire 
	 @sujet=Sujet.find(params[:sujet_id])
	session[:titre]=@sujet.titre
	@comment=@sujet.comments.create(comment_params)
  
   respond_to do |format|
      if @comment.save
        format.html { redirect_to @sujet, notice: t('succes_created') }
        format.json { render action: 'show', status: :created, location: @sujet }
      else
      	flash[:error] =@comment.errors.full_messages.join(',').gsub(','," et le ")
      	#######j en'ai ajouter un message flash , ensuite rediriger vers @sujet : le sujet en cours (son show) ,
      	###### et dans le show.html.erb de sujet je fais :
      	######## je fais <h3><%= flash[:error] %></h3>
        format.html { redirect_to @sujet}
       # format.json { render json: @comment.errors, status: :unprocessable_entity }
      end

    end
    ###creation du formulaire pour user 
=begin
    <div class="field">
    <%= f.label :statut  %><br>
   <%= f.label 'Admin'  %> <%= f.radio_button :statut , 'admin' %>
       <%= f.label 'Enregistré'  %>   <%= f.radio_button :statut , 'enregistré' %>
           
  </div>
  <div>
 <%= f.label 'ville' %>
<%= f.select(:statut , [[:Rabat,1],[:Casablanca,2]]) %>
</div>
 <div>
 <%= f.label 'villes' %>
<%= f.check_box(:statut) %>
</div>
=end 

    #####


end 

=end 
###remarque importante 
User.find_by_login(params[:session][:login]) recupere l'user ayant where login=....,  <%=form_for(:session, url: sessions_path))%># si tu fait sessions_path et form methode post alors tu cibles def create de session
ou=@user)User.where(login: 'harik', passe: 'test') mais elle retourne un tableau vide si rien donc verifie par @user.empty?
#####creation de session => session[:login]=@user.first.login
## les helpers sont des module autoload dans les vues mais si on veut les utiliser dans les controllers il mettre 
include SessionsHelper
#####Implementation dans session helper creation des cookies et session 
module SessionsHelper
   
def connecter user
  session[:login]=user.login
  session[:statut]=user.statut
  cookies[:user]={value: user.id, exprires: 1.minutes.from_now }

  
end
def current_user= user
  @current_user=user
end
public 
def current_user
  User.find(cookies[:user])
end


end
### et dans sujets/index.html.erb voici un exemple d'utilisation de ce  helper 
  <h4>Bienvenue  <%= session[:login]%> id est <%= cookies[:user]%> d'après le helper <%= current_user.login %></h4>
  #### fin :)